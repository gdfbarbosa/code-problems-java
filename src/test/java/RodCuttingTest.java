import io.gdfbarbosa.algorithms.RodCutting;
import org.junit.Assert;
import org.junit.Test;

public class RodCuttingTest {
    static int[] prices;
    static {
        prices = new int[]{59, 65, 80, 79, 53, 14, 53, 20, 92, 19, 73, 91, 49, 26, 70, 60, 9, 38, 30, 2, 8, 71, 52, 83, 11, 16, 72, 26, 55, 46, 8, 97, 53, 20, 77, 8, 56, 1, 35, 81, 40, 38, 83, 78, 64, 29, 52, 34, 87, 90, 46, 80, 18, 38, 95, 18, 64, 8, 94, 13, 16, 87, 69, 26, 20, 48, 27, 92, 84, 92, 67, 21, 83, 11, 49, 4, 29, 59, 10, 13, 41, 65, 25, 29, 29, 86, 65, 73, 83, 13, 14, 58, 1, 44, 42, 5, 47, 38, 5, 96, 63, 45, 78, 14, 88, 20, 65, 71, 60, 28, 63, 54, 84, 14, 77, 67, 43, 34, 63, 39, 39, 23, 27, 43, 5, 67, 41, 49, 36, 19, 64, 30, 11, 43, 91, 60, 65, 78, 40, 7, 96, 67, 27, 95, 30, 52, 19, 78, 97, 19, 96, 62, 86, 74, 85, 39, 45, 11, 4, 21, 98, 88, 23, 82, 50, 58, 78, 20, 92, 37, 20, 73, 39, 83, 3, 65, 46, 47, 28, 18, 32, 26, 0, 25, 60, 17, 87, 87, 72, 49, 48, 95, 79, 66, 87, 77, 40, 51, 46, 57, 61, 20, 31, 12, 19, 27, 86, 8, 38, 39, 22, 30, 94, 44, 77, 67, 85, 13, 82, 0, 99, 12, 34, 54, 98, 70, 84, 66, 44, 85, 38, 16, 64, 82, 53, 13, 92, 98, 8, 48, 60, 76, 55, 96, 56, 44, 68, 17, 15, 58, 4, 87, 50, 46, 77, 7, 22, 18, 31, 30, 9, 66, 64, 28, 83, 93, 15, 0, 50, 61, 95, 66, 40, 78, 54, 9, 67, 86, 44, 59, 98, 21, 33, 16, 47, 1, 62, 32, 58, 56, 26, 21, 76, 15, 61, 28, 28, 45, 20, 49, 69, 1, 56, 8, 44, 28, 66, 68, 24, 49, 26, 20, 62, 24, 79, 85, 10, 39, 0, 51, 77, 10, 58, 17, 23, 58, 72, 10, 77, 85, 86, 31, 70, 97, 96, 15, 56, 89, 36, 1, 70, 87, 29, 81, 34, 30, 90, 28, 86, 77, 99, 17, 54, 61, 55, 9, 17, 45, 48, 3, 62, 74, 25, 77, 15, 15, 53, 85, 86, 36, 13, 16, 20, 6, 27, 16, 73, 70, 87, 43, 6, 41, 67, 39, 40, 49, 45, 12, 4, 92, 86, 68, 62, 72, 30, 67, 24, 39, 59, 47, 2, 31, 75, 67, 3, 73, 51, 58, 38, 84, 20, 48, 63, 57, 32, 21, 58, 0, 45, 96, 19, 47, 80, 29, 37, 43, 7, 49, 13, 16, 26, 76, 87, 3, 85, 57, 44, 43, 3, 80, 73, 94, 59, 58, 15, 63, 96, 37, 24, 78, 79, 51, 21, 88, 3, 17, 71, 91, 13, 79, 65, 31, 64, 16, 24, 69, 64, 57, 54, 16, 5, 18, 27, 99, 93, 86, 16, 41, 7, 20, 88, 61, 18, 67, 56, 33, 14, 50, 58, 17, 34, 89, 21, 6, 12, 45, 99, 69, 97, 55, 57, 18, 61, 97, 84, 98, 76, 77, 73, 83, 63, 87, 8, 44, 45, 47, 39, 89, 89, 33, 93, 1, 76, 74, 95, 24, 3, 51, 38, 34, 61, 28, 38, 3, 54, 6, 35, 32, 75, 58, 19, 75, 28, 75, 42, 65, 43, 43, 68, 18, 73, 80, 6, 15, 90, 10, 18, 76, 50, 42, 64, 75, 78, 39, 16, 88, 67, 76, 61, 58, 61, 16, 24, 8, 93, 19, 71, 61, 16, 9, 56, 28, 68, 70, 11, 50, 20, 97, 3, 38, 61, 77, 77, 94, 91, 61, 39, 2, 20, 99, 51, 45, 17, 4, 18, 17, 40, 40, 41, 38, 23, 95, 96, 90, 34, 18, 78, 80, 69, 25, 40, 69, 72, 20, 62, 30, 67, 19, 15, 72, 45, 64, 36, 90, 67, 69, 53, 39, 51, 68, 37, 78, 47, 51, 43, 87, 20, 78, 43, 42, 1, 60, 9, 32, 12, 25, 25, 17, 29, 71, 51, 24, 73, 22, 58, 71, 45, 4, 74, 3, 26, 84, 72, 68, 85, 63, 27, 74, 22, 66, 26, 43, 62, 67, 24, 48, 90, 44, 44, 77, 0, 98, 32, 16, 59, 69, 56, 11, 69, 29, 30, 40, 34, 90, 14, 45, 62, 13, 86, 74, 62, 15, 87, 99, 21, 47, 0, 66, 7, 54, 60, 35, 93, 30, 16, 92, 20, 64, 79, 80, 55, 93, 2, 16, 92, 3, 24, 80, 73, 66, 31, 95, 98, 45, 99, 87, 50, 4, 45, 64, 93, 15, 76, 58, 1, 92, 61, 61, 9, 65, 27, 10, 52, 3, 52, 0, 58, 75, 33, 75, 46, 76, 27, 76, 47, 66, 54, 32, 14, 36, 76, 70, 68, 57, 96, 16, 36, 77, 69, 5, 3, 92, 13, 45, 99, 77, 12, 46, 61, 37, 32, 95, 36, 23, 6, 48, 50, 6, 85, 13, 96, 52, 61, 15, 31, 80, 78, 78, 73, 43, 60, 7, 23, 16, 51, 10, 8, 25, 80, 4, 50, 67, 93, 14, 37, 75, 3, 34, 48, 57, 17, 1, 42, 12, 87, 5, 73, 89, 21, 21, 34, 35, 74, 5, 80, 71, 75, 7, 76, 50, 53, 58, 65, 85, 16, 97, 22, 67, 15, 61, 87, 52, 48, 10, 33, 93, 50, 20, 11, 49, 68, 74, 88, 35, 87, 77, 41, 89, 70, 36, 18, 75, 82, 90, 42, 74, 97, 1, 13, 17, 89, 5, 53, 68, 45, 85, 81, 83, 74, 36, 52, 70, 42, 77, 79, 30, 66, 40, 23, 72, 42, 40, 26, 5, 49, 61, 32, 21, 23, 1, 65, 57, 29, 59, 25, 48, 73, 12, 53, 92, 52, 77, 83, 11, 99, 78, 80, 11, 40, 86, 11, 69, 3, 78, 51, 93, 73, 25, 56, 90, 94, 42, 87, 95, 35, 27, 56, 54, 46, 46, 15, 97, 11, 88, 76, 12, 18, 39, 69, 0, 96, 33, 4, 96, 88, 17, 17, 55, 40, 66, 78, 11, 65, 16, 78, 99, 63, 36, 79, 41, 87};
    }

    static RodCutting cutRod = new RodCutting();

    @Test
    public void cutRod1() {
        Assert.assertEquals(65, cutRod.cutRod(prices, 1));
    }

    @Test
    public void cutRod2() {
        Assert.assertEquals(130, cutRod.cutRod(prices, 2));
    }

    @Test
    public void cutRod3() {
        Assert.assertEquals(195, cutRod.cutRod(prices, 3));
    }

    @Test
    public void cutRod4() {
        Assert.assertEquals(260, cutRod.cutRod(prices, 4));
    }

    @Test
    public void cutRod5() {
        Assert.assertEquals(325, cutRod.cutRod(prices, 5));
    }

    @Test
    public void cutRod6() {
        Assert.assertEquals(390, cutRod.cutRod(prices, 6));
    }

    @Test
    public void cutRod7() {
        Assert.assertEquals(455, cutRod.cutRod(prices, 7));
    }

    @Test
    public void cutRod8() {
        Assert.assertEquals(520, cutRod.cutRod(prices, 8));
    }

    @Test
    public void cutRod9() {
        Assert.assertEquals(585, cutRod.cutRod(prices, 9));
    }

    @Test
    public void cutRod10() {
        Assert.assertEquals(650, cutRod.cutRod(prices, 10));
    }

    @Test
    public void cutRod30() {
        Assert.assertEquals(2275, cutRod.cutRod(prices, 35));
    }

    @Test
    public void cutRod100() {
        Assert.assertEquals(6500, cutRod.cutRod(prices, 100));
    }

    @Test
    public void cutRod1000() {
        Assert.assertEquals(65000, cutRod.cutRod(prices, 1000));
    }
}
